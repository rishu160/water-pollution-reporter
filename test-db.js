const mongoose = require('mongoose');
require('dotenv').config();

const testConnection = async () => {
  try {
    console.log('ЁЯФД Connecting to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/water-pollution');
    console.log('тЬЕ MongoDB connected successfully!');
    
    // Test data insert рдХрд░реЗрдВ
    const testReport = {
      title: 'Test Water Pollution Report',
      description: 'рдпрд╣ рдПрдХ test report рд╣реИ database connection check рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП',
      location: { 
        latitude: 28.6139, 
        longitude: 77.2090,
        address: 'New Delhi, India'
      },
      pollutionLevel: 'Medium',
      waterBodyType: 'River',
      reportedBy: {
        name: 'Test User',
        phone: '9876543210',
        email: 'test@example.com'
      },
      status: 'Pending',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const Report = mongoose.model('Report', new mongoose.Schema({}, {strict: false}));
    const savedReport = await Report.create(testReport);
    console.log('тЬЕ Test report created with ID:', savedReport._id);
    
    // Test data retrieve рдХрд░реЗрдВ
    const reports = await Report.find();
    console.log('тЬЕ Total reports in database:', reports.length);
    
    // Sample reports create рдХрд░реЗрдВ
    const sampleReports = [
      {
        title: 'рдЧрдВрдЧрд╛ рдирджреА рдореЗрдВ рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдХрдЪрд░рд╛',
        description: 'рдЧрдВрдЧрд╛ рдирджреА рдореЗрдВ рдмрд╣реБрдд рд╕рд╛рд░рд╛ рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдХрдЪрд░рд╛ рддреИрд░ рд░рд╣рд╛ рд╣реИ',
        location: { latitude: 25.3176, longitude: 82.9739, address: 'рд╡рд╛рд░рд╛рдгрд╕реА, рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢' },
        pollutionLevel: 'High',
        waterBodyType: 'River',
        reportedBy: { name: 'рдЕрдорд┐рдд рд╢рд░реНрдорд╛', phone: '9876543211' },
        status: 'Pending'
      },
      {
        title: 'рддрд╛рд▓рд╛рдм рдореЗрдВ рд░рд╛рд╕рд╛рдпрдирд┐рдХ рдкреНрд░рджреВрд╖рдг',
        description: 'рдлреИрдХреНрдЯреНрд░реА рдХрд╛ рдЧрдВрджрд╛ рдкрд╛рдиреА рддрд╛рд▓рд╛рдм рдореЗрдВ рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ',
        location: { latitude: 28.4595, longitude: 77.0266, address: 'рдЧреБрдбрд╝рдЧрд╛рдВрд╡, рд╣рд░рд┐рдпрд╛рдгрд╛' },
        pollutionLevel: 'Critical',
        waterBodyType: 'Pond',
        reportedBy: { name: 'рдкреНрд░рд┐рдпрд╛ рдЧреБрдкреНрддрд╛', phone: '9876543212' },
        status: 'Under Review'
      },
      {
        title: 'рдпрдореБрдирд╛ рдирджреА рдореЗрдВ рд╕реАрд╡реЗрдЬ',
        description: 'рдпрдореБрдирд╛ рдирджреА рдореЗрдВ рд╕реАрд╡реЗрдЬ рдХрд╛ рдкрд╛рдиреА рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ',
        location: { latitude: 28.6692, longitude: 77.4538, address: 'рдиреЛрдПрдбрд╛, рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢' },
        pollutionLevel: 'High',
        waterBodyType: 'River',
        reportedBy: { name: 'рд░рд╛рдЬ рдХреБрдорд╛рд░', phone: '9876543213' },
        status: 'In Progress'
      }
    ];

    await Report.insertMany(sampleReports);
    console.log('тЬЕ Sample reports created successfully!');
    
    const finalCount = await Report.countDocuments();
    console.log('тЬЕ Final total reports:', finalCount);
    
    mongoose.connection.close();
    console.log('ЁЯФТ Database connection closed');
    
  } catch (error) {
    console.error('тЭМ MongoDB connection failed:', error.message);
    process.exit(1);
  }
};

console.log('ЁЯЪА Starting MongoDB connection test...');
testConnection();